syms X1 R1 R2 X6 X7 X8 X9 X10 X12 % 9 parameters
syms C_1 C_2 C_3 C_4 C_5 C_6 C_7 C_8 C_9 C_10 C_11 C_12 C_13 C_14 C_15 

F = [(((1-X6)+(((X6*R2)*(R2*1-0+0))*((1-2*(X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*((X9/3)+(X9/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((1-2*(X12*X10)/3))))*R1+((1-X6)+(((X6*R2)*(R2*1-0+0))*((1-2*X7/3)))+(((X6*(1-R2))*R2*1-0)*(((X9*X8)/3)+((X9*X8)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((1-2*(X12*X10)/3))))*(1-R1))-C_1,
(((((X6*R2)*(R2*1-0+0))*(((X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*((1-2*X9/3)+(X9/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*(((X12*X10)/3))))*R1+((((X6*R2)*(R2*1-0+0))*((X7/3)))+(((X6*(1-R2))*R2*1-0)*((1-2*(X9*X8)/3)+((X9*X8)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*(((X12*X10)/3))))*(1-R1))-C_2,
(((((X6*R2)*(R2*1-0+0))*(((X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*((X9/3)+(1-2*X9/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*(((X12*X10)/3))))*R1+((((X6*R2)*(R2*1-0+0))*((X7/3)))+(((X6*(1-R2))*R2*1-0)*(((X9*X8)/3)+(1-2*(X9*X8)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*(((X12*X10)/3))))*(1-R1))-C_3,
(((1-X6)+(((X6*R2)*(R2*1-0+0))*((1-2*(X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*(((X12*X9)/3)+((X12*X9)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((1-2*X10/3))))*R1+((1-X6)+(((X6*R2)*(R2*1-0+0))*((1-2*X7/3)))+(((X6*(1-R2))*R2*1-0)*(((X12*X9*X8)/3)+((X12*X9*X8)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((1-2*X10/3))))*(1-R1))-C_4,
(((((X6*R2)*(R2*1-0+0))*(((X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*((1-2*(X12*X9)/3)+((X12*X9)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((X10/3))))*R1+((((X6*R2)*(R2*1-0+0))*((X7/3)))+(((X6*(1-R2))*R2*1-0)*((1-2*(X12*X9*X8)/3)+((X12*X9*X8)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((X10/3))))*(1-R1))-C_5,
(((((X6*R2)*(R2*1-0+0))*(((X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*(((X12*X9)/3)+(1-2*(X12*X9)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((X10/3))))*R1+((((X6*R2)*(R2*1-0+0))*((X7/3)))+(((X6*(1-R2))*R2*1-0)*(((X12*X9*X8)/3)+(1-2*(X12*X9*X8)/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((X10/3))))*(1-R1))-C_6,
((1-X6)+(((X6*R2)*(R2*1-0+0))*((1-2*(X9*X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*((X12/3)+(X12/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((1-2*X10/3))))-C_7,
((((X6*R2)*(R2*1-0+0))*(((X9*X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*((1-2*X12/3)+(X12/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((X10/3))))-C_8,
((((X6*R2)*(R2*1-0+0))*(((X9*X8*X7)/3)))+(((X6*(1-R2))*R2*1-0)*((X12/3)+(1-2*X12/3)))+(((X6*(1-R2))*((1-R2)*1-0+0))*((X10/3))))-C_9,
(((1-2*X9/3)*R2+(X12/3)*(1-R2))*R1+((1-2*(X9*X8)/3)*R2+(X12/3)*(1-R2))*(1-R1))-C_10,
(((X9/3)*R2+(X12/3)*(1-R2))*R1+(((X9*X8)/3)*R2+(X12/3)*(1-R2))*(1-R1))-C_11,
(((X9/3)*R2+(1-2*X12/3)*(1-R2))*R1+(((X9*X8)/3)*R2+(1-2*X12/3)*(1-R2))*(1-R1))-C_12,
(((1-2*X9/3)*R2+(X12/3)*(1-R2))*R1+((1-2*(X9*X8)/3)*R2+(X12/3)*(1-R2))*(1-R1))-C_13,
(((X9/3)*R2+(X12/3)*(1-R2))*R1+(((X9*X8)/3)*R2+(X12/3)*(1-R2))*(1-R1))-C_14,
(((X9/3)*R2+(1-2*X12/3)*(1-R2))*R1+(((X9*X8)/3)*R2+(1-2*X12/3)*(1-R2))*(1-R1))-C_15]

V = [X1 R1 R2 X6 X7 X8 X9 X10 X12 C_1 C_2 C_3 C_4 C_5 C_6 C_7 C_8 C_9 C_10 C_11 C_12 C_13 C_14 C_15]
JF = jacobian(F, V)
B = [zeros(15,9) -eye(15)]

rank([JF; B]) % nxn that varnish
size([JF; B]) % The size function returns the dimensions of an array (we take the second entry)
null([JF;B]) % number of overparametrizations

%% Results
% rank =
% 
%     20
% 
% 
% size =
% 
%     30    24

%% Dim = 9 - (24-20) = 5
