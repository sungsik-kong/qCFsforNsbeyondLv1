needsPackage "MultigradedImplicitization"
needsPackage "NumericalAlgebraicGeometry"

R = QQ[R1,X10,X11,X12,X15,X16,X4,X7,X8,Z]
params = polySystem {
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X16*X15)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X16*X15)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(1-2*X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X16*X15*X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X15/3)+(1-2*X15/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X15*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X16*X15*X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X15/3)+(X15/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X15*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X16*X15*X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X15/3)+(X15/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X15*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(1-2*X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((X16*X15)/3),
(1-2*(X16*X15)/3),
((X16*X15)/3),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11*X10)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11*X10)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+(1-2*(X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X11*X10)/3)+((X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X11*X10)/3)+(1-2*(X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X11*X10)/3)+((X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+(1-2*(X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((X16*X15)/3),
(1-2*(X16*X15)/3),
((X16*X15)/3),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(1-2*X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
(1-2*X11/3),
(X11/3),
(X11/3),
(1-2*(X16*X15*X11)/3),
((X16*X15*X11)/3),
((X16*X15*X11)/3),
(1-2*X11/3),
(X11/3),
(X11/3),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(1-2*X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
((X16*X15)/3),
(1-2*(X16*X15)/3),
((X16*X15)/3),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(1-2*X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
(1-2*X11/3),
(X11/3),
(X11/3),
(1-2*(X16*X15*X11)/3),
((X16*X15*X11)/3),
((X16*X15*X11)/3),
(1-2*X11/3),
(X11/3),
(X11/3),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(1-2*X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
(1-2*(X11*X4)/3),
((X11*X4)/3),
((X11*X4)/3),
(1-2*(X16*X15*X11*X4)/3),
((X16*X15*X11*X4)/3),
((X16*X15*X11*X4)/3),
(1-2*(X11*X4)/3),
((X11*X4)/3),
((X11*X4)/3),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8*X4)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X4/3)+(1-2*X4/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12*X11*X4)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8*X4)/3)))+(((X7*(1-R1))*R1*1-0)*((X4/3)+(X4/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11*X4)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8*X4)/3)))+(((X7*(1-R1))*R1*1-0)*((X4/3)+(X4/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11*X4)/3)))),
(1-2*X4/3),
(X4/3),
(X4/3),
(1-2*X4/3),
(X4/3),
(X4/3),
(1-2*X4/3),
(X4/3),
(X4/3),
((1-2*(X10*X4)/3)*R1+(1-2*X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1)),
((1-2*(X10*X4)/3)*R1+(1-2*X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1))}



-- New brute force solution
W = params;
L = flatten entries W#PolyMap; -- make a list of the polynomials

-- Get Maximum degree of the polynomials
D = for i in L list degree i;
maxdeg = max flatten D

-- Make all polynomials have the same degree
NewSystem = flatten for j in L list Z^(maxdeg - (flatten degree(j))_0) * j;

-- Now work with the new system
W2 = polySystem NewSystem;
Wh = homogenize(W2,R,Z)
Wh2 = flatten entries Wh#PolyMap
S2 = QQ[C_1..C_210]
phi = map(R,S2, Wh2)
G3 = componentsOfKernel(1, phi)
print " "
peek G3 -- seems peek G3 has better display than its print version
