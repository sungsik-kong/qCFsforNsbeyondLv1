"""
Working code to compute some graded piece of the CF elimination ideal
using Multigraded implicitization methods
Ikenna N. 
inometa@hawaii.edu
Jan. 2025
"""

restart --Restart to clear workspace
needsPackage "MultigradedImplicitization"
-- needsPackage "MultigradedImplicitization" -- Uncomment when you need to compute dimensions numerically 

R = QQ[R1,X10,X11,X12,X15,X16,X4,X7,X8,T] -- ring of parameters plus extra homogenizing variable T
S = QQ[C_0..C_210] -- We will map T to C_0 and substitute C_0 <- 1 to dehomogenize

-- Image of the CF parametrization
im = {
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X16*X15)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X16*X15)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15)/3)*R1+(X15/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(1-2*X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X16*X15*X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X15/3)+(1-2*X15/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X15*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X16*X15*X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X15/3)+(X15/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X15*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X16*X15*X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X15/3)+(X15/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X15*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X16/3)+(1-2*X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X11*X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X16/3)+(X16/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((X16*X15)/3),
(1-2*(X16*X15)/3),
((X16*X15)/3),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11*X10)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11*X10)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11*X10)/3)*R1+(X15/3)*(1-R1)),
((1-2*(X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(X16/3)*(1-R1)),
(((X11*X10)/3)*R1+(1-2*X16/3)*(1-R1)),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+(1-2*(X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X11*X10)/3)+((X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X11*X10)/3)+(1-2*(X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X11*X10)/3)+((X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+(1-2*(X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11*X10)/3)+((X16*X11*X10)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((X16*X15)/3),
(1-2*(X16*X15)/3),
((X16*X15)/3),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(1-2*X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
(1-2*X11/3),
(X11/3),
(X11/3),
(1-2*(X16*X15*X11)/3),
((X16*X15*X11)/3),
((X16*X15*X11)/3),
(1-2*X11/3),
(X11/3),
(X11/3),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(1-2*X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
((X16*X15)/3),
(1-2*(X16*X15)/3),
((X16*X15)/3),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((1-2*(X16*X15*X11)/3)*R1+(1-2*X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
(((X16*X15*X11)/3)*R1+(X15/3)*(1-R1)),
((1-2*X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(X16/3)*(1-R1)),
((X11/3)*R1+(1-2*X16/3)*(1-R1)),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(1-2*X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12)/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((X11/3)+(X11/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*(X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+(1-2*(X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((X12/3)))),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8)/3)))+(((X7*(1-R1))*R1*1-0)*(((X16*X11)/3)+((X16*X11)/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*X12/3)))),
(1-2*X11/3),
(X11/3),
(X11/3),
(1-2*(X16*X15*X11)/3),
((X16*X15*X11)/3),
((X16*X15*X11)/3),
(1-2*X11/3),
(X11/3),
(X11/3),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((X10/3)*R1+(1-2*X11/3)*(1-R1)),
((X10/3)*R1+(X11/3)*(1-R1)),
((1-2*X10/3)*R1+(X11/3)*(1-R1)),
((X10/3)*R1+(1-2*(X16*X11)/3)*(1-R1)),
((X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-2*X10/3)*R1+((X16*X11)/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((X10/3)+(1-2*X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
((((X7*R1)*(R1*1-0+0))*((X8/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X10/3)+(X10/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11)/3)))),
(1-2*(X11*X4)/3),
((X11*X4)/3),
((X11*X4)/3),
(1-2*(X16*X15*X11*X4)/3),
((X16*X15*X11*X4)/3),
((X16*X15*X11*X4)/3),
(1-2*(X11*X4)/3),
((X11*X4)/3),
((X11*X4)/3),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X11*X4)/3)*(1-R1)),
((1-2*X4/3)*R1+(1-2*(X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((X4/3)*R1+((X16*X11*X4)/3)*(1-R1)),
((1-X7)+(((X7*R1)*(R1*1-0+0))*((1-2*(X10*X8*X4)/3)))+(((X7*(1-R1))*R1*1-0)*((1-2*X4/3)+(1-2*X4/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*((1-2*(X16*X12*X11*X4)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8*X4)/3)))+(((X7*(1-R1))*R1*1-0)*((X4/3)+(X4/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11*X4)/3)))),
((((X7*R1)*(R1*1-0+0))*(((X10*X8*X4)/3)))+(((X7*(1-R1))*R1*1-0)*((X4/3)+(X4/3)))+(((X7*(1-R1))*((1-R1)*1-0+0))*(((X16*X12*X11*X4)/3)))),
(1-2*X4/3),
(X4/3),
(X4/3),
(1-2*X4/3),
(X4/3),
(X4/3),
(1-2*X4/3),
(X4/3),
(X4/3),
((1-2*(X10*X4)/3)*R1+(1-2*X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1)),
((1-2*(X10*X4)/3)*R1+(1-2*X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1)),
(((X10*X4)/3)*R1+(X4/3)*(1-R1))};

-- Trick: MultigradedImplicitization package only works when multigrading refines total degree
-- There is an implicit assumption that the ideal will be homogenous.

-- Without the following Trick the matrix of grading for our parametrization does npt satisfy needed requirement/criteria
""" Now the trick """
im = {T} | apply(im, f -> f * T);
phi = map(R, S, im)

-- D = maxGrading(phi)  -- Run to get matrix of multigrading explicitly (but is  implicitly computed by package) 
d = 1 -- Change the values d to the dth graded piece of the ideal of interest
I = time componentsOfKernel(d, phi)

L = flatten values I  -- Run to view I as a list

-- To dehomogenize, run the following
-- L = apply(L, f -> sub(f, S)) Run if needed
apply(L, f -> sub(f, {C_0=>1})) -- Run to dehomogenize